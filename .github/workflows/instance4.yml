# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Instance 4

on:
  push:
    branches: [ "master" ]

jobs:
  build-runner:
    runs-on: runner_new_7
    name: Instance 4
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Backup Old Jar
        run: |
          sudo pwd
          sleep 3
          JAR_FILE=$(find "$(pwd)/target" -maxdepth 1 -name "*.jar" ! -name "*SNAPSHOT*" -print -quit)
          if [ -n "$JAR_FILE" ]; then
            JAR_FILENAME=$(basename "$JAR_FILE")
            NEW_JAR_FILENAME="${JAR_FILENAME%.*}_old.jar"
            cp "$JAR_FILE" "$(pwd)/target/$NEW_JAR_FILENAME"
            echo "CÃ³pia do arquivo $JAR_FILENAME criada com o nome $NEW_JAR_FILENAME"
          else
            echo "Nenhum arquivo JAR encontrado."
          fi

      - name: Build with Maven
        run: >
          mvn package assembly:single -DskipTests=true

      - name: Kill Port
        run: |
          if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/tcp; then
            echo "Port ${{ vars.VARIABLE_PORT_SERVER }} (TCP) is in use. Killing the process..."
            sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/tcp
          fi
          if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/udp; then
            echo "Port ${{ vars.VARIABLE_PORT_SERVER }} (UDP) is in use. Killing the process..."
            sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/udp
          fi

      - name: Execute Jar File
        run: |
          sleep 3
          JAR_FILE=$(find "$(pwd)/target" -maxdepth 1 -name "*.jar" ! -name "*SNAPSHOT*" -print -quit)
          if [ -n "$JAR_FILE" ]; then
            echo "Jar file found: $JAR_FILE" -> Executing...
            sudo AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
            SERVER_PORT=${{ vars.VARIABLE_PORT_SERVER }} \
            ANNOTATION_TEST_1=${{ secrets.ANNOTATION_TEST_1 }} \
            ANNOTATION_TEST_2=${{ secrets.ANNOTATION_TEST_2 }} \
            ANNOTATION_TEST_3=${{ secrets.ANNOTATION_TEST_3 }} \
            ANNOTATION_TEST_4=${{ secrets.ANNOTATION_TEST_4 }} \
            ANNOTATION_TEST_5=${{ secrets.ANNOTATION_TEST_5 }} \
            ANNOTATION_TEST_6=${{ vars.VARIABLE_TEST }} \
            java -jar "$JAR_FILE" >> logs &
          else
            echo "No jar file found."
            exit 1
          fi

      - name: Logs
        run: |
          sleep 15 &&
          cat logs


      - name: Check Status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ vars.VARIABLE_PORT_SERVER }}/ping) &&
          if [ "$response" = "200" ]; then
            echo "Server is running."
          else
            echo "Server not available! Status: $response" &&
            cat logs
            exit 1
          fi


      - name: Crontab Clear
        run: >
          echo "" | crontab -

      - name: Crontab Configuration
        run: >
          JAR_FILE=$(find "$(pwd)/target" -maxdepth 1 -name "*.jar" ! -name "*SNAPSHOT*" -print -quit) &&
          echo "@reboot
          sudo 
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          SERVER_PORT=${{ vars.VARIABLE_PORT_SERVER }}
          ANNOTATION_TEST_1=${{ secrets.ANNOTATION_TEST_1 }}
          ANNOTATION_TEST_2=${{ secrets.ANNOTATION_TEST_2 }}
          ANNOTATION_TEST_3=${{ secrets.ANNOTATION_TEST_3 }}
          ANNOTATION_TEST_4=${{ secrets.ANNOTATION_TEST_4 }}
          ANNOTATION_TEST_5=${{ secrets.ANNOTATION_TEST_5 }}
          ANNOTATION_TEST_6=${{ vars.VARIABLE_TEST }}
          java -jar \"$JAR_FILE >> logs\"
          " | crontab -