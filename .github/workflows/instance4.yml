# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Instance 4

on:
  push:
    branches: [ "master" ]

jobs:
  build-runner:
    runs-on: runner_new_7
    name: Instance 4
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Check and Create java_files directory
        run: |
          USER_NAME=$(whoami)
          if [ ! -d "/home/$USER_NAME/java_files" ]; then
              # If the java_files folder does not exist, create it
              mkdir -p "/home/$USER_NAME/java_files"
              echo "java_files folder created in /home/$USER_NAME"
          else
              echo "java_files folder already exists in /home/$USER_NAME"
          fi


      - name: Backup Old Jar
        run: |
          sudo pwd
          sleep 3
          USER_NAME=$(whoami)
          JAR_FILE=$(find "/home/$USER_NAME/java_files" -maxdepth 1 -name "*.jar" ! -name "*_old*" -print -quit)
          if [ -n "$JAR_FILE" ]; then
            DESTINY="/home/$USER_NAME/java_files"
            JAR_FILENAME=$(basename "$JAR_FILE")
            NEW_JAR_FILENAME="${JAR_FILENAME%.*}_old.jar"
            sudo cp "$JAR_FILE" "$DESTINY/$NEW_JAR_FILENAME"
            echo "Created copy of $JAR_FILENAME === $NEW_JAR_FILENAME in $DESTINY"
          else
            echo "JAR file not found."
          fi

      - name: Backup Crontab
        run: |
          USER_NAME=$(whoami)
          DESTINY="/home/$USER_NAME/java_files"
          crontab -l > $DESTINY/crontab_backup

      - name: Build with Maven
        run: >
          mvn package assembly:single -DskipTests=true

      - name: Copy Post Build Jar File
        run: |
          USER_NAME=$(whoami)
          JAR_FILE=$(find "$(pwd)/target" -maxdepth 1 -name "*.jar" ! -name "*SNAPSHOT*" -print -quit)
          if [ -n "$JAR_FILE" ]; then
            DESTINY="/home/$USER_NAME/java_files"
            JAR_FILENAME=$(basename "$JAR_FILE")
            NEW_JAR_FILENAME="${JAR_FILENAME%.*}_old.jar"
            sudo cp "$JAR_FILE" "$DESTINY"
            echo "Created copy of $JAR_FILENAME === $NEW_JAR_FILENAME in $DESTINY"
          else
            echo "JAR file not found."
          fi

      - name: Kill Port
        run: |
          if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/tcp; then
            echo "Port ${{ vars.VARIABLE_PORT_SERVER }} (TCP) is in use. Killing the process..."
            sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/tcp
          fi
          if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/udp; then
            echo "Port ${{ vars.VARIABLE_PORT_SERVER }} (UDP) is in use. Killing the process..."
            sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/udp
          fi

      - name: Execute Jar File
        run: |
          sleep 3
          USER_NAME=$(whoami)
          JAR_FILE=$(find "/home/$USER_NAME/java_files" -maxdepth 1 -name "*.jar" ! -name "*_old*" -print -quit)
          if [ -n "$JAR_FILE" ]; then
            JAR_FILENAME=$(basename "$JAR_FILE")
            sudo AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
            SERVER_PORT=${{ vars.VARIABLE_PORT_SERVER }} \
            ANNOTATION_TEST_1=${{ secrets.ANNOTATION_TEST_1 }} \
            ANNOTATION_TEST_2=${{ secrets.ANNOTATION_TEST_2 }} \
            ANNOTATION_TEST_3=${{ secrets.ANNOTATION_TEST_3 }} \
            ANNOTATION_TEST_4=${{ secrets.ANNOTATION_TEST_4 }} \
            ANNOTATION_TEST_5=${{ secrets.ANNOTATION_TEST_5 }} \
            ANNOTATION_TEST_6=${{ vars.VARIABLE_TEST }} \
            java -jar "$JAR_FILE" >> logs &
          else
            echo "No jar file found."
            exit 1
          fi

      - name: Logs
        run: |
          sleep 10 &&
          cat logs


      - name: CheckStatus
        id: check-status
        run: |
          sleep 2 &&
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ vars.VARIABLE_PORT_SERVER }}/ping) &&
          echo "response-status=$response" >> $GITHUB_OUTPUT
          if [ "$response" = "200" ]; then
            echo "Server is running."
          else
            echo "Server not available! Status: $response" &&
            cat logs
          fi

      - name: Rollback Action
        if: ${{ steps.check-status.outputs.response-status != 200 }}
        run: |
          if [ -f "/home/$(whoami)/java_files/crontab_backup" ]; then
              echo "crontab_backup file found."

              JAR_FILE=$(find "/home/$(whoami)/java_files" -maxdepth 1 -name "*_old.jar")
              if [ -n "$JAR_FILE" ]; then
                  echo "Old JAR file found: $JAR_FILE"

                  NEW_JAR_FILE="${JAR_FILE%_old.jar}.jar"
                  mv "$JAR_FILE" "$NEW_JAR_FILE"
                  echo "Removing _old suffix from JAR file: $NEW_JAR_FILE"
          
                  if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/tcp; then
                    echo "Port ${{ vars.VARIABLE_PORT_SERVER }} (TCP) is in use. Killing the process..."
                    sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/tcp
                    eval "$(sed 's/@reboot //g' "/home/$(whoami)/java_files/crontab_backup") &"
                    eval "cat /home/$(whoami)/java_files/logs"
                  else
                    eval "$(sed 's/@reboot //g' "/home/$(whoami)/java_files/crontab_backup") &"
                    eval "cat logs"
                  fi

              else
                  echo "Old JAR file not found."
              fi
          else
              echo "crontab_backup file not found."
          fi


      - name: Crontab Clear
        if: ${{ steps.check-status.outputs.response-status == 200 }}
        run: >
          echo "" | crontab -

      - name: Crontab Configuration
        if: ${{ steps.check-status.outputs.response-status == 200 }}
        run: >
          USER_NAME=$(whoami) &&
          JAR_FILE=$(find "/home/$USER_NAME/java_files" -maxdepth 1 -name "*.jar" ! -name "*_old*" -print -quit) &&
          echo "@reboot
          sudo 
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          SERVER_PORT=${{ vars.VARIABLE_PORT_SERVER }}
          ANNOTATION_TEST_1=${{ secrets.ANNOTATION_TEST_1 }}
          ANNOTATION_TEST_2=${{ secrets.ANNOTATION_TEST_2 }}
          ANNOTATION_TEST_3=${{ secrets.ANNOTATION_TEST_3 }}
          ANNOTATION_TEST_4=${{ secrets.ANNOTATION_TEST_4 }}
          ANNOTATION_TEST_5=${{ secrets.ANNOTATION_TEST_5 }}
          ANNOTATION_TEST_6=${{ vars.VARIABLE_TEST }}
          java -jar \"$JAR_FILE\" >> logs
          " | crontab -