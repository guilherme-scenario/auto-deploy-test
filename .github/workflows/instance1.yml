# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Instance 1

on:
  push:
    branches: [ "master" ]

jobs:
  build-runner:
    runs-on: runner_new_2
    name: Instance 1
    if: github.ref == 'refs/heads/master'

  build-runner2:
    runs-on: runner_new
    name: Instance 2
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: >
          mvn package assembly:single -DskipTests=true

      - name: Kill Port
        run: |
          if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/tcp; then
            echo "Port 8080 (TCP) is in use. Killing the process..."
            sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/tcp
          fi
          if sudo fuser -s ${{ vars.VARIABLE_PORT_SERVER }}/udp; then
            echo "Port 8080 (UDP) is in use. Killing the process..."
            sudo fuser -k -TERM -k ${{ vars.VARIABLE_PORT_SERVER }}/udp
          fi

      - name: Execute Jar File
        run: >
          JAR_PATH=$(pwd) &&
          sudo
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          SERVER_PORT=${{ vars.VARIABLE_PORT_SERVER }}
          ANNOTATION_TEST_1=${{ secrets.ANNOTATION_TEST_1 }}
          ANNOTATION_TEST_2=${{ secrets.ANNOTATION_TEST_2 }}
          ANNOTATION_TEST_3=${{ secrets.ANNOTATION_TEST_3 }}
          ANNOTATION_TEST_4=${{ secrets.ANNOTATION_TEST_4 }}
          ANNOTATION_TEST_5=${{ secrets.ANNOTATION_TEST_5 }}
          ANNOTATION_TEST_6=${{ vars.VARIABLE_TEST }}
          java -jar "$JAR_PATH"/target/auto-deploy.jar >> logs &

      - name: Logs
        run: |
          sleep 15 &&
          cat logs


      - name: Check Status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ vars.VARIABLE_PORT_SERVER }}/ping) &&
          if [ "$response" = "200" ]; then
            echo "Server is running."
          else
            echo "Server not available! Status: $response" &&
            nano logs
            exit 1
          fi


      - name: Crontab Clear
        run: >
          echo "" | crontab -

      - name: Crontab Configuration
        run: >
          JAR_PATH=$(pwd) &&
          echo "@reboot
          sudo
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          SERVER_PORT=${{ vars.VARIABLE_PORT_SERVER }}
          ANNOTATION_TEST_1=${{ secrets.ANNOTATION_TEST_1 }} 
          ANNOTATION_TEST_2=${{ secrets.ANNOTATION_TEST_2 }}
          ANNOTATION_TEST_3=${{ secrets.ANNOTATION_TEST_3 }}
          ANNOTATION_TEST_4=${{ secrets.ANNOTATION_TEST_4 }}
          ANNOTATION_TEST_5=${{ secrets.ANNOTATION_TEST_5 }}
          ANNOTATION_TEST_6=${{ vars.VARIABLE_TEST }}
          java -jar "$JAR_PATH"/target/auto-deploy.jar >> logs"
          | crontab -